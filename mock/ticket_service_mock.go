// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/talk2sohail/train-ticket-api/internal/ticket/types (interfaces: TicketService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/talk2sohail/train-ticket-api/internal/common/genproto/ticket"
)

// MockTicketService is a mock of TicketService interface.
type MockTicketService struct {
	ctrl     *gomock.Controller
	recorder *MockTicketServiceMockRecorder
}

// MockTicketServiceMockRecorder is the mock recorder for MockTicketService.
type MockTicketServiceMockRecorder struct {
	mock *MockTicketService
}

// NewMockTicketService creates a new mock instance.
func NewMockTicketService(ctrl *gomock.Controller) *MockTicketService {
	mock := &MockTicketService{ctrl: ctrl}
	mock.recorder = &MockTicketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTicketService) EXPECT() *MockTicketServiceMockRecorder {
	return m.recorder
}

// GetReceiptDetails mocks base method.
func (m *MockTicketService) GetReceiptDetails(arg0 context.Context, arg1 string) (*proto.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptDetails", arg0, arg1)
	ret0, _ := ret[0].(*proto.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptDetails indicates an expected call of GetReceiptDetails.
func (mr *MockTicketServiceMockRecorder) GetReceiptDetails(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptDetails", reflect.TypeOf((*MockTicketService)(nil).GetReceiptDetails), arg0, arg1)
}

// GetUsersBySection mocks base method.
func (m *MockTicketService) GetUsersBySection(arg0 context.Context, arg1 proto.Seat_Section) (proto.GetUsersBySectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersBySection", arg0, arg1)
	ret0, _ := ret[0].(proto.GetUsersBySectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersBySection indicates an expected call of GetUsersBySection.
func (mr *MockTicketServiceMockRecorder) GetUsersBySection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersBySection", reflect.TypeOf((*MockTicketService)(nil).GetUsersBySection), arg0, arg1)
}

// ModifyUserSeat mocks base method.
func (m *MockTicketService) ModifyUserSeat(arg0 context.Context, arg1 *proto.Receipt, arg2 *proto.Seat) (proto.ModifyUserSeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyUserSeat", arg0, arg1, arg2)
	ret0, _ := ret[0].(proto.ModifyUserSeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyUserSeat indicates an expected call of ModifyUserSeat.
func (mr *MockTicketServiceMockRecorder) ModifyUserSeat(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyUserSeat", reflect.TypeOf((*MockTicketService)(nil).ModifyUserSeat), arg0, arg1, arg2)
}

// PurchaseTicket mocks base method.
func (m *MockTicketService) PurchaseTicket(arg0 context.Context, arg1 *proto.PurchaseTicketRequest) (proto.PurchaseTicketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurchaseTicket", arg0, arg1)
	ret0, _ := ret[0].(proto.PurchaseTicketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PurchaseTicket indicates an expected call of PurchaseTicket.
func (mr *MockTicketServiceMockRecorder) PurchaseTicket(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurchaseTicket", reflect.TypeOf((*MockTicketService)(nil).PurchaseTicket), arg0, arg1)
}

// RemoveUser mocks base method.
func (m *MockTicketService) RemoveUser(arg0 context.Context, arg1 string) (proto.RemoveUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(proto.RemoveUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockTicketServiceMockRecorder) RemoveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockTicketService)(nil).RemoveUser), arg0, arg1)
}
