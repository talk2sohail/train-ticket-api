// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: ticket.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TrainTicketingService_PurchaseTicket_FullMethodName    = "/trainticketing.service.TrainTicketingService/PurchaseTicket"
	TrainTicketingService_GetReceiptDetails_FullMethodName = "/trainticketing.service.TrainTicketingService/GetReceiptDetails"
	TrainTicketingService_GetUsersBySection_FullMethodName = "/trainticketing.service.TrainTicketingService/GetUsersBySection"
	TrainTicketingService_RemoveUser_FullMethodName        = "/trainticketing.service.TrainTicketingService/RemoveUser"
	TrainTicketingService_ModifyUserSeat_FullMethodName    = "/trainticketing.service.TrainTicketingService/ModifyUserSeat"
)

// TrainTicketingServiceClient is the client API for TrainTicketingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for the Train Ticketing System
type TrainTicketingServiceClient interface {
	// Submits a purchase for a train ticket.
	PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*PurchaseTicketResponse, error)
	// Retrieves the details of a specific receipt for a user.
	GetReceiptDetails(ctx context.Context, in *GetReceiptDetailsRequest, opts ...grpc.CallOption) (*GetReceiptDetailsResponse, error)
	// Views all users and their allocated seats for a given train section.
	GetUsersBySection(ctx context.Context, in *GetUsersBySectionRequest, opts ...grpc.CallOption) (*GetUsersBySectionResponse, error)
	// Removes a user and their ticket from the train.
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	// Modifies the seat allocation for an existing user.
	ModifyUserSeat(ctx context.Context, in *ModifyUserSeatRequest, opts ...grpc.CallOption) (*ModifyUserSeatResponse, error)
}

type trainTicketingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainTicketingServiceClient(cc grpc.ClientConnInterface) TrainTicketingServiceClient {
	return &trainTicketingServiceClient{cc}
}

func (c *trainTicketingServiceClient) PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*PurchaseTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseTicketResponse)
	err := c.cc.Invoke(ctx, TrainTicketingService_PurchaseTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingServiceClient) GetReceiptDetails(ctx context.Context, in *GetReceiptDetailsRequest, opts ...grpc.CallOption) (*GetReceiptDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptDetailsResponse)
	err := c.cc.Invoke(ctx, TrainTicketingService_GetReceiptDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingServiceClient) GetUsersBySection(ctx context.Context, in *GetUsersBySectionRequest, opts ...grpc.CallOption) (*GetUsersBySectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersBySectionResponse)
	err := c.cc.Invoke(ctx, TrainTicketingService_GetUsersBySection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingServiceClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, TrainTicketingService_RemoveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainTicketingServiceClient) ModifyUserSeat(ctx context.Context, in *ModifyUserSeatRequest, opts ...grpc.CallOption) (*ModifyUserSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModifyUserSeatResponse)
	err := c.cc.Invoke(ctx, TrainTicketingService_ModifyUserSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainTicketingServiceServer is the server API for TrainTicketingService service.
// All implementations must embed UnimplementedTrainTicketingServiceServer
// for forward compatibility.
//
// Service definition for the Train Ticketing System
type TrainTicketingServiceServer interface {
	// Submits a purchase for a train ticket.
	PurchaseTicket(context.Context, *PurchaseTicketRequest) (*PurchaseTicketResponse, error)
	// Retrieves the details of a specific receipt for a user.
	GetReceiptDetails(context.Context, *GetReceiptDetailsRequest) (*GetReceiptDetailsResponse, error)
	// Views all users and their allocated seats for a given train section.
	GetUsersBySection(context.Context, *GetUsersBySectionRequest) (*GetUsersBySectionResponse, error)
	// Removes a user and their ticket from the train.
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	// Modifies the seat allocation for an existing user.
	ModifyUserSeat(context.Context, *ModifyUserSeatRequest) (*ModifyUserSeatResponse, error)
	mustEmbedUnimplementedTrainTicketingServiceServer()
}

// UnimplementedTrainTicketingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTrainTicketingServiceServer struct{}

func (UnimplementedTrainTicketingServiceServer) PurchaseTicket(context.Context, *PurchaseTicketRequest) (*PurchaseTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedTrainTicketingServiceServer) GetReceiptDetails(context.Context, *GetReceiptDetailsRequest) (*GetReceiptDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceiptDetails not implemented")
}
func (UnimplementedTrainTicketingServiceServer) GetUsersBySection(context.Context, *GetUsersBySectionRequest) (*GetUsersBySectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersBySection not implemented")
}
func (UnimplementedTrainTicketingServiceServer) RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedTrainTicketingServiceServer) ModifyUserSeat(context.Context, *ModifyUserSeatRequest) (*ModifyUserSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyUserSeat not implemented")
}
func (UnimplementedTrainTicketingServiceServer) mustEmbedUnimplementedTrainTicketingServiceServer() {}
func (UnimplementedTrainTicketingServiceServer) testEmbeddedByValue()                               {}

// UnsafeTrainTicketingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainTicketingServiceServer will
// result in compilation errors.
type UnsafeTrainTicketingServiceServer interface {
	mustEmbedUnimplementedTrainTicketingServiceServer()
}

func RegisterTrainTicketingServiceServer(s grpc.ServiceRegistrar, srv TrainTicketingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTrainTicketingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TrainTicketingService_ServiceDesc, srv)
}

func _TrainTicketingService_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServiceServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketingService_PurchaseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServiceServer).PurchaseTicket(ctx, req.(*PurchaseTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketingService_GetReceiptDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServiceServer).GetReceiptDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketingService_GetReceiptDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServiceServer).GetReceiptDetails(ctx, req.(*GetReceiptDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketingService_GetUsersBySection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersBySectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServiceServer).GetUsersBySection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketingService_GetUsersBySection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServiceServer).GetUsersBySection(ctx, req.(*GetUsersBySectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketingService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketingService_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServiceServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainTicketingService_ModifyUserSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainTicketingServiceServer).ModifyUserSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TrainTicketingService_ModifyUserSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainTicketingServiceServer).ModifyUserSeat(ctx, req.(*ModifyUserSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrainTicketingService_ServiceDesc is the grpc.ServiceDesc for TrainTicketingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrainTicketingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trainticketing.service.TrainTicketingService",
	HandlerType: (*TrainTicketingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurchaseTicket",
			Handler:    _TrainTicketingService_PurchaseTicket_Handler,
		},
		{
			MethodName: "GetReceiptDetails",
			Handler:    _TrainTicketingService_GetReceiptDetails_Handler,
		},
		{
			MethodName: "GetUsersBySection",
			Handler:    _TrainTicketingService_GetUsersBySection_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _TrainTicketingService_RemoveUser_Handler,
		},
		{
			MethodName: "ModifyUserSeat",
			Handler:    _TrainTicketingService_ModifyUserSeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket.proto",
}
